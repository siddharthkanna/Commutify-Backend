generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String          @id @default(uuid())
  uid              String          @unique
  email            String          @unique
  name             String
  mobileNumber     String
  roles            UserRole[]
  photoUrl         String?
  bio              String?
  rating           Float?
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  driverBookings   Booking[]       @relation("DriverBookings")
  ridesAsPassenger Booking[]       @relation("PassengerBookings")
  receivedMessages Message[]       @relation("MessageReceiver")
  sentMessages     Message[]       @relation("MessageSender")
  receivedRatings  Rating[]        @relation("RatingReceiver")
  givenRatings     Rating[]        @relation("RatingGiver")
  ridesAsDriver    Ride[]          @relation("DriverRides")
  preferences      UserPreference?
  vehicles         Vehicle[]
}

model UserPreference {
  id             String   @id @default(uuid())
  userId         String   @unique
  smoking        Boolean  @default(false)
  pets           Boolean  @default(false)
  music          Boolean  @default(true)
  conversation   Boolean  @default(true)
  airConditioned Boolean  @default(true)
  maximumDetour  Int      @default(15)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Vehicle {
  id             String   @id @default(uuid())
  vehicleNumber  String   @unique
  vehicleName    String
  vehicleType    String
  color          String?
  make           String?
  model          String?
  year           Int?
  fuelType       String?
  fuelEfficiency Float?
  capacity       Int      @default(4)
  features       String[]
  photos         String[]
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  isActive       Boolean  @default(true)
  ownerId        String
  rides          Ride[]
  owner          User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  @@index([ownerId])
  @@index([isActive])
  @@index([vehicleType])
}

model Location {
  id                 String   @id @default(uuid())
  latitude           Float
  longitude          Float
  placeName          String
  address            String?
  city               String?
  state              String?
  country            String?
  zipCode            String?
  createdAt          DateTime @default(now())
  ridesAsDestination Ride[]   @relation("RideDestinationLocation")
  ridesAsPickup      Ride[]   @relation("RidePickupLocation")

  @@index([latitude, longitude])
  @@index([city, state])
}

model Ride {
  id                String      @id @default(uuid())
  price             Float
  pricePerKm        Float?
  selectedCapacity  Int
  immediateMode     Boolean     @default(false)
  scheduledMode     Boolean     @default(true)
  selectedDate      DateTime
  selectedTime      DateTime
  estimatedDuration Int?
  estimatedDistance Float?
  rideType          RideType    @default(published)
  rideStatus        RideStatus  @default(Upcoming)
  isRecurring       Boolean     @default(false)
  recurringDays     DayOfWeek[]
  notes             String?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  driverId          String
  vehicleId         String
  pickupId          String
  destinationId     String
  bookings          Booking[]
  destination       Location    @relation("RideDestinationLocation", fields: [destinationId], references: [id])
  driver            User        @relation("DriverRides", fields: [driverId], references: [id])
  pickup            Location    @relation("RidePickupLocation", fields: [pickupId], references: [id])
  vehicle           Vehicle     @relation(fields: [vehicleId], references: [id])
  waypoints         Waypoint[]

  @@index([driverId])
  @@index([rideStatus])
  @@index([selectedDate])
  @@index([rideType])
  @@index([isRecurring])
}

model Waypoint {
  id               String    @id @default(uuid())
  rideId           String
  latitude         Float
  longitude        Float
  placeName        String
  stopOrder        Int
  estimatedArrival DateTime?
  createdAt        DateTime  @default(now())
  ride             Ride      @relation(fields: [rideId], references: [id], onDelete: Cascade)

  @@index([rideId])
  @@index([latitude, longitude])
}

model Booking {
  id              String        @id @default(uuid())
  passengerCount  Int           @default(1)
  source          String
  destination     String
  status          BookingStatus @default(ongoing)
  bookingDate     DateTime      @default(now())
  paymentStatus   PaymentStatus @default(PENDING)
  paymentAmount   Float?
  paymentMethod   String?
  specialRequests String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  passengerId     String
  driverId        String
  rideId          String
  driver          User          @relation("DriverBookings", fields: [driverId], references: [id])
  passenger       User          @relation("PassengerBookings", fields: [passengerId], references: [id])
  ride            Ride          @relation(fields: [rideId], references: [id])
  rating          Rating?

  @@index([passengerId, status])
  @@index([rideId, status])
  @@index([driverId, status])
  @@index([paymentStatus])
}

model Rating {
  id        String   @id @default(uuid())
  rating    Float
  comment   String?
  createdAt DateTime @default(now())
  raterId   String
  ratedId   String
  bookingId String?  @unique
  booking   Booking? @relation(fields: [bookingId], references: [id])
  rated     User     @relation("RatingReceiver", fields: [ratedId], references: [id])
  rater     User     @relation("RatingGiver", fields: [raterId], references: [id])

  @@index([raterId])
  @@index([ratedId])
}

model Message {
  id         String   @id @default(uuid())
  content    String
  isRead     Boolean  @default(false)
  createdAt  DateTime @default(now())
  senderId   String
  receiverId String
  receiver   User     @relation("MessageReceiver", fields: [receiverId], references: [id])
  sender     User     @relation("MessageSender", fields: [senderId], references: [id])

  @@index([senderId])
  @@index([receiverId])
  @@index([isRead])
}

enum UserRole {
  DRIVER
  PASSENGER
}

enum DayOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

enum RideType {
  booked
  published
}

enum RideStatus {
  Upcoming
  InProgress
  Completed
  Cancelled
}

enum BookingStatus {
  ongoing
  confirmed
  cancelled
  completed
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}
